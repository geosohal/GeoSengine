// bilateral blurr filter

#version 430

#define pi   3.1415926535897932384626433832795
#define sy 100  // size of y thread group

const float variance = 5.2f;

layout(local_size_x = 1, local_size_y = sy, local_size_z = 1) in;
// Declares thread group size

uniform vec2 dimensions;
uniform blurKernel {float weights [101]; }; // Declares a uniform block
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform int kernalSize = 3; // size must always be odd number to have a whole number half width

layout (r32f) uniform readonly image2D src; // src image as single channel 32bit float readonly
layout (r32f) uniform writeonly image2D dst; // ds

shared float v[sy+sy/2]; // Variable shared with other threads in the  thread group
shared vec3 n[sy+sy/2];
shared float d[sy+sy/2];	// depths

vec2 GetUVCoord(ivec2 texel)
{
        return vec2(float(texel.x), float(texel.y))/ dimensions;
}

float CalcRangeKernal(uint baseTexel, uint currTexel)
{
	float D = sqrt(2.f * pi * variance);
	float N = max(0.f, dot(n[currTexel],n[baseTexel]));
	float delta = d[currTexel] - d[baseTexel];
	float E = exp( -(delta*delta) / (variance * 2.f));
	return N * E / D;
}
void main()
{
    int w = (kernalSize - 1) / 2;

    //vertical pass, since the gpos offsets affect y component

    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
    uint i = gl_LocalInvocationID.y; // Local thread id in the sy x 1 thread groups
    ivec2 currTexel = gpos+ivec2(0,-w);
    vec2 uv = GetUVCoord(currTexel);
    v[i] = imageLoad(src, currTexel ).x;
    n[i] = texture(normalMap, uv).xyz;
    d[i] =  texture(depthMap, uv).x;
    //d[i] = 1.0 - (1.0 - d[i]) * 80.0;   // scale depth up

    if (i<2*w)
    {
        currTexel = gpos+ivec2(0,sy-w);
        uv = GetUVCoord(currTexel);
        v[i+sy] = imageLoad(src, currTexel ).x; // read extra 2*w pixels.
        n[i+sy] = texture(normalMap, uv).xyz;
    }
    barrier(); // Wait for all threads to catchup before reading v[] and n[]

    // for each thread and its corresponding pixel in thread group, multiply weights and pixels
    float blurredPixel = 0.f;
    uint baseIndex = i + w;
    float wSum = 1;
    for (int j = 0; j <= 2*w; j++)    // remember, this is loop for single thread
    {
        uint vertIndex = (i+j);
        float spatialKernal = weights[j];
        float rangeKernal = CalcRangeKernal(baseIndex, vertIndex);
        float W =  spatialKernal*rangeKernal;
        blurredPixel += v[vertIndex] * W;
        wSum += W;
    }

    imageStore(dst, gpos, vec4(blurredPixel/wSum )); // Write to destination image
}
